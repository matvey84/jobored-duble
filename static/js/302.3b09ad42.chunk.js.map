{"version":3,"file":"static/js/302.3b09ad42.chunk.js","mappings":"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","sources":["components/paginator/PageButtonList.tsx","ui/PaginationArrowSVG.tsx","ui/buttons/PaginationArrowButton.tsx","components/paginator/Paginator.tsx","ui/LocationPointSVG.tsx","ui/StarSVG.tsx","ui/buttons/AddFavoriteVacancYButton.tsx","components/vacancy-item/VacancyItem.tsx","components/vacancy-list/VacancyList.tsx","ui/SearchFormInputGlass.tsx","components/main-page-search-form/MainPageSearchForm.tsx","ui/IndustrySelectOption.tsx","ui/IndustriSeLect.tsx","ui/PaymentInput.tsx","ui/ResetButtonSVG.tsx","ui/buttons/ResetButton.tsx","ui/OpenFoemSVG.tsx","ui/buttons/OpenFormButton.tsx","components/filter-form/FilterForm.tsx","pages/mainPage/MainPage.tsx"],"sourcesContent":["import { nanoid } from 'nanoid';\r\nimport React, { memo, useEffect, useState } from 'react';\r\nimport { useLocation, useSearchParams } from 'react-router-dom';\r\nimport { fetchGetVacancy } from '../../redux/data-slice/dataFetchRequest';\r\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\r\nimport {\r\n  setCurrentPageForFavoritePage,\r\n  setCurrentPage,\r\n} from '../../redux/paginator-slice/paginationStateSlice';\r\nimport { IFetchQuery } from '../../types/requestTypes';\r\nimport { queryString2 } from '../../redux/handlers/handlers';\r\nimport { setFetchQuery } from '../../redux/data-slice/dataSlice';\r\n\r\ninterface IProp {\r\n  numIndex: number;\r\n  pagesAmmount: number;\r\n  buttonCreate: () => number[][];\r\n}\r\n\r\nconst PageButtonList = memo((props: IProp) => {\r\n  const dispatch = useAppDispatch();\r\n  const location = useLocation();\r\n  const { numIndex, buttonCreate } = props;\r\n  const currentPage = useAppSelector((state) => state.paginationStateSlice.currentPage);\r\n  const currentPageForFavoritePage = useAppSelector(\r\n    (state) => state.paginationStateSlice.currentPageForFavoritePage\r\n  );\r\n\r\n  const [hilightButton, setHiligthButton] = useState<number>(0);\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, setSearchParams] = useSearchParams();\r\n  const fetchQuery = useAppSelector((state) => state.dataSlice.fetchQuery);\r\n\r\n  const createPaginationQueryForFetch = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    const fetchQueryData: IFetchQuery = {\r\n      ...fetchQuery,\r\n    };\r\n\r\n    fetchQueryData.page = Number(e.currentTarget.id);\r\n\r\n    location.pathname.includes('favorite') &&\r\n      dispatch(setCurrentPageForFavoritePage(Number(e.currentTarget.id)));\r\n\r\n    !location.pathname.includes('favorite') && dispatch(setCurrentPage(Number(e.currentTarget.id)));\r\n\r\n    dispatch(setFetchQuery(fetchQueryData));\r\n\r\n    dispatch(fetchGetVacancy(queryString2(fetchQueryData)));\r\n    setSearchParams(queryString2(fetchQueryData).trim());\r\n  };\r\n  useEffect(\r\n    () =>\r\n      location.pathname.includes('favorite')\r\n        ? setHiligthButton(currentPageForFavoritePage)\r\n        : setHiligthButton(currentPage),\r\n    [currentPage, currentPageForFavoritePage, location.pathname]\r\n  );\r\n  return (\r\n    <>\r\n      {!!buttonCreate().length ? (\r\n        buttonCreate()[numIndex].map((item) => (\r\n          <button\r\n            className=\"btn-page\"\r\n            key={nanoid()}\r\n            id={String(item)}\r\n            disabled={item === hilightButton ? true : false}\r\n            onClick={(e: React.MouseEvent<HTMLButtonElement>) => createPaginationQueryForFetch(e)}\r\n          >\r\n            <span id={String(item)} className=\"btn-page-text\">\r\n              {item}\r\n            </span>\r\n          </button>\r\n        ))\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n});\r\nexport default PageButtonList;\r\n","import React from 'react';\r\ninterface IProp {\r\n  disabled: boolean;\r\n}\r\nconst PaginationArrowSVG = (props: IProp) => {\r\n  return (\r\n    <>\r\n      <svg\r\n        className=\"arrowSVG\"\r\n        width=\"30\"\r\n        height=\"30\"\r\n        viewBox=\"0 0 32 32\"\r\n        fill={props.disabled ? '#5E96FC' : 'none'}\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        {/* <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"3.5\" fill=\"white\" /> */}\r\n        <path\r\n          d=\"M15.367 16L18.667 12.7L17.724 11.757L13.481 16L17.724 20.243L18.667 19.3L15.367 16Z\"\r\n          fill={props.disabled ? '#FFFFFF' : '#7B7C88'}\r\n        />\r\n        {/* <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"3.5\" stroke=\"#D5D6DC\" />*/}\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PaginationArrowSVG;\r\n","import React from 'react';\r\nimport PaginationArrowSVG from '../PaginationArrowSVG';\r\nimport { useLocation, useSearchParams } from 'react-router-dom';\r\nimport { fetchGetVacancy } from '../../redux/data-slice/dataFetchRequest';\r\nimport { setFetchQuery } from '../../redux/data-slice/dataSlice';\r\nimport { queryString2 } from '../../redux/handlers/handlers';\r\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\r\nimport {\r\n  setNumIndexFavoritePage,\r\n  setNumIndex,\r\n  setCurrentPageForFavoritePage,\r\n  setCurrentPage,\r\n} from '../../redux/paginator-slice/paginationStateSlice';\r\nimport { IFetchQuery } from '../../types/requestTypes';\r\ninterface IProp {\r\n  id: string;\r\n  contexClass: string;\r\n  numIndex: number;\r\n  disabled: boolean;\r\n}\r\nconst PaginationArrowButton = (props: IProp) => {\r\n  const { id, contexClass, numIndex, disabled } = props;\r\n\r\n  const dispatch = useAppDispatch();\r\n  const location = useLocation();\r\n  const firstAndLastPaginationPages = useAppSelector(\r\n    (state) => state.paginationStateSlice.firstAndLastPaginationPages\r\n  );\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, setSearchParams] = useSearchParams();\r\n  const fetchQuery = useAppSelector((state) => state.dataSlice.fetchQuery);\r\n\r\n  const arrowButtonHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    const fetchQueryData: IFetchQuery = {\r\n      ...fetchQuery,\r\n    };\r\n\r\n    if (e.currentTarget.id === 'right-arrow') {\r\n      location.pathname.includes('favorite')\r\n        ? dispatch(setNumIndexFavoritePage(numIndex + 1))\r\n        : dispatch(setNumIndex(numIndex + 1));\r\n\r\n      fetchQueryData.page = firstAndLastPaginationPages.lastPaginationPage + 1;\r\n    }\r\n\r\n    if (e.currentTarget.id === 'left-arrow') {\r\n      location.pathname.includes('favorite')\r\n        ? dispatch(setNumIndexFavoritePage(numIndex - 1))\r\n        : dispatch(setNumIndex(numIndex - 1));\r\n\r\n      fetchQueryData.page = firstAndLastPaginationPages.firstPaginationPage - 1;\r\n    }\r\n\r\n    !location.pathname.includes('favorite') &&\r\n      dispatch(fetchGetVacancy(queryString2(fetchQueryData)));\r\n    dispatch(setFetchQuery(fetchQueryData));\r\n\r\n    location.pathname.includes('favorite')\r\n      ? dispatch(setCurrentPageForFavoritePage(Number(fetchQueryData.page)))\r\n      : dispatch(setCurrentPage(Number(fetchQueryData.page)));\r\n\r\n    setSearchParams(queryString2(fetchQueryData));\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={`btn-arrow ${contexClass}`}\r\n      id={id}\r\n      onClick={(e: React.MouseEvent<HTMLButtonElement>) => arrowButtonHandler(e)}\r\n      disabled={disabled}\r\n    >\r\n      <PaginationArrowSVG disabled={disabled} />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default PaginationArrowButton;\r\n","import './paginator-style.scss';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { createAllButtonsNumberNote } from '../../redux/handlers/handlers';\r\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\r\nimport { setFirstAndLastPaginationPages } from '../../redux/paginator-slice/paginationStateSlice';\r\nimport PageButtonList from './PageButtonList';\r\nimport PaginationArrowButton from '../../ui/buttons/PaginationArrowButton';\r\ninterface IProp {\r\n  numIndex: number;\r\n  pagesAmmount: number;\r\n  totalVacancies: number;\r\n  buttonCreate?: () => number[][];\r\n}\r\n\r\nfunction Paginator(props: IProp) {\r\n  const { numIndex, pagesAmmount, totalVacancies } = props;\r\n  const dispatch = useAppDispatch();\r\n  const location = useLocation();\r\n  const pageCounter = useAppSelector((state) => state.dataSlice.pageCount);\r\n  const [disabledLeftArrow, setDisabledLeftArrow] = useState<boolean>(true);\r\n  const [disabledRightArrow, setDisabledRightArrow] = useState<boolean>(false);\r\n  const firstAndLastPaginationPages = useAppSelector(\r\n    (state) => state.paginationStateSlice.firstAndLastPaginationPages\r\n  );\r\n\r\n  const buttonCreate = useCallback(() => {\r\n    return createAllButtonsNumberNote(pagesAmmount, numIndex);\r\n  }, [numIndex, pagesAmmount]);\r\n\r\n  useEffect(() => {\r\n    const firstAndLastPaginationPages = {\r\n      firstPaginationPage: Math.min(...buttonCreate()[numIndex]),\r\n      lastPaginationPage: Math.max(...buttonCreate()[numIndex]),\r\n    };\r\n\r\n    dispatch(setFirstAndLastPaginationPages(firstAndLastPaginationPages));\r\n  }, [buttonCreate, dispatch, location.pathname, numIndex]);\r\n\r\n  useEffect(() => {\r\n    setDisabledLeftArrow(firstAndLastPaginationPages.firstPaginationPage - 1 <= 1);\r\n    setDisabledRightArrow(\r\n      (firstAndLastPaginationPages.lastPaginationPage - 1) * Number(pageCounter) >=\r\n        totalVacancies - Number(pageCounter)\r\n    );\r\n  }, [\r\n    totalVacancies,\r\n    firstAndLastPaginationPages.lastPaginationPage,\r\n    location.pathname,\r\n    numIndex,\r\n    pageCounter,\r\n    firstAndLastPaginationPages.firstPaginationPage,\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"paginator-wrapper\">\r\n      <div className=\"paginator\">\r\n        <PaginationArrowButton\r\n          id={'left-arrow'}\r\n          contexClass={'left-arrow'}\r\n          numIndex={numIndex}\r\n          disabled={disabledLeftArrow}\r\n        />\r\n        {buttonCreate().length ? (\r\n          <PageButtonList\r\n            numIndex={numIndex}\r\n            pagesAmmount={pagesAmmount}\r\n            buttonCreate={buttonCreate}\r\n          />\r\n        ) : (\r\n          <></>\r\n        )}\r\n        <PaginationArrowButton\r\n          id={'right-arrow'}\r\n          contexClass={'right-arrow'}\r\n          numIndex={numIndex}\r\n          disabled={disabledRightArrow}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Paginator;\r\n","import React from 'react';\r\n\r\nconst LocationPointSVG = () => {\r\n  return (\r\n    <>\r\n      <svg\r\n        width=\"16\"\r\n        height=\"18\"\r\n        viewBox=\"0 0 16 18\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          d=\"M12.714 12.8807C11.9335 13.6612 10.3013 15.2935 9.17814 16.4166C8.52727 17.0675 7.47304 17.0678 6.82217 16.4169C5.7186 15.3134 4.11797 13.7127 3.28593 12.8807C0.682439 10.2772 0.682439 6.05612 3.28593 3.45262C5.88943 0.849126 10.1105 0.849126 12.714 3.45262C15.3175 6.05612 15.3175 10.2772 12.714 12.8807Z\"\r\n          stroke=\"#ACADB9\"\r\n          strokeWidth=\"1.25\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        />\r\n        <path\r\n          d=\"M10.5 8.16667C10.5 9.54738 9.38069 10.6667 7.99998 10.6667C6.61927 10.6667 5.49998 9.54738 5.49998 8.16667C5.49998 6.78595 6.61927 5.66667 7.99998 5.66667C9.38069 5.66667 10.5 6.78595 10.5 8.16667Z\"\r\n          stroke=\"#ACADB9\"\r\n          strokeWidth=\"1.25\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        />\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LocationPointSVG;\r\n","import React from 'react';\r\nimport { useAppSelector } from '../redux/hooks';\r\ninterface IProp {\r\n  id: string;\r\n}\r\nconst StarSVG = (props: IProp) => {\r\n  const favoriteVacancyList = useAppSelector((state) => state.dataSlice.favoriteVacancyList);\r\n  return (\r\n    <>\r\n      <svg\r\n        width=\"22\"\r\n        height=\"20\"\r\n        viewBox=\"0 0 22 20\"\r\n        fill={\r\n          favoriteVacancyList.some((vacancy) => Number(vacancy.id) === Number(props.id))\r\n            ? '#5E96FC'\r\n            : 'none'\r\n        }\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className=\"star\"\r\n      >\r\n        <path\r\n          d=\"M9.97183 1.70846C10.4382 0.933481 11.5618 0.933482 12.0282 1.70847L14.3586 5.58087C14.5262 5.85928 14.7995 6.05784 15.116 6.13116L19.5191 7.15091C20.4002 7.35499 20.7474 8.42356 20.1545 9.10661L17.1918 12.5196C16.9788 12.765 16.8744 13.0863 16.9025 13.41L17.2932 17.9127C17.3714 18.8138 16.4625 19.4742 15.6296 19.1214L11.4681 17.3583C11.1689 17.2316 10.8311 17.2316 10.5319 17.3583L6.37038 19.1214C5.53754 19.4742 4.62856 18.8138 4.70677 17.9127L5.09754 13.41C5.12563 13.0863 5.02124 12.765 4.80823 12.5196L1.8455 9.1066C1.25257 8.42356 1.59977 7.35499 2.48095 7.15091L6.88397 6.13116C7.20053 6.05784 7.47383 5.85928 7.64138 5.58087L9.97183 1.70846Z\"\r\n          stroke=\"#ACADB9\"\r\n          strokeWidth=\"1.5\"\r\n        />\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StarSVG;\r\n","import React from 'react';\r\nimport './buttonStyle.scss';\r\nimport { useAppDispatch } from '../../redux/hooks';\r\nimport { setFavoriteVacancy } from '../../redux/data-slice/dataSlice';\r\nimport StarSVG from '../StarSVG';\r\n\r\ninterface IProp {\r\n  id: string;\r\n}\r\n\r\nconst AddFavoriteVacancyButton = (props: IProp) => {\r\n  const dispatch = useAppDispatch();\r\n  const addFavoriteVacancyButtonHandler = (e: React.MouseEvent<HTMLElement>) => {\r\n    e.stopPropagation();\r\n    dispatch(setFavoriteVacancy(e.currentTarget.id));\r\n  };\r\n  return (\r\n    <button\r\n      id={props.id}\r\n      className=\"add-favorite-vacancy-button\"\r\n      data-elem={`vacancy-${props.id}-shortlist-button`}\r\n      onClick={(e: React.MouseEvent<HTMLButtonElement>) => addFavoriteVacancyButtonHandler(e)}\r\n    >\r\n      <StarSVG id={props.id} />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default AddFavoriteVacancyButton;\r\n","import React from 'react';\r\nimport './vacancyItem.scss';\r\nimport LocationPointSVG from '../../ui/LocationPointSVG';\r\nimport AddFavoriteVacancyButton from '../../ui/buttons/AddFavoriteVacancYButton';\r\nimport { IVacansy } from '../../types/vacancyTypes';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\ninterface IProp {\r\n  data: IVacansy | null;\r\n}\r\n\r\nfunction VacancyItem(props: IProp) {\r\n  const data = props.data;\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <section\r\n      onClick={() => {\r\n        !location.pathname.includes(`${data!.id}`) && navigate(`/vacancy/${data!.id}`);\r\n      }}\r\n      className=\"vacancy\"\r\n      id={String(data!.id)}\r\n      data-elem={`vacancy-${String(data!.id)}`}\r\n    >\r\n      <article className=\"vacancy-short-info\">\r\n        {!location.pathname.includes(`${data!.id}`) ? (\r\n          <h3 className=\"vacancy-title\">{data!.profession}</h3>\r\n        ) : (\r\n          <h2 className=\"vacancy-title\">{data!.profession}</h2>\r\n        )}\r\n\r\n        <section className=\"vacancy-offers\">\r\n          <span className=\"vacancy-salary\">\r\n            {data!.payment_from <= 0 && data!.payment_to <= 0\r\n              ? `з/п не указана`\r\n              : data!.payment_from <= 0\r\n              ? null\r\n              : `з/п от ${data!.payment_from} ${data!.currency}`}\r\n          </span>\r\n          {data!.payment_to <= 0 || data!.payment_from <= 0 ? '' : <b>-</b>}\r\n          <span className=\"vacancy-salary\">\r\n            {data!.payment_from <= 0 && data!.payment_to <= 0\r\n              ? null\r\n              : data!.payment_from <= 0\r\n              ? `з/п до ${data!.payment_to} ${data!.currency}`\r\n              : data!.payment_to <= 0\r\n              ? null\r\n              : `до ${data!.payment_to} ${data!.currency}`}\r\n          </span>\r\n          <b>&bull;</b>\r\n          <span className=\"vacancy-working-mode\">{data!.type_of_work.title}</span>\r\n        </section>\r\n        <p className=\"vacancy-location\">\r\n          <span className=\"point\">\r\n            <LocationPointSVG />\r\n          </span>\r\n          <span className=\"city\">{data!.town.title}</span>\r\n        </p>\r\n      </article>\r\n      <AddFavoriteVacancyButton id={String(data!.id)} />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default VacancyItem;\r\n","import React from 'react';\r\nimport VacancyItem from '../vacancy-item/VacancyItem';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport { IVacansy } from '../../types/vacancyTypes';\r\nimport NoFavoriteVacancyMessage from '../nofavoriteVanacy/NoFavoriteVacancyMessage';\r\nimport Loader from '../loader/Loader';\r\n\r\ninterface IProp {\r\n  vacancyData: IVacansy[];\r\n  spinnerStatus?: boolean;\r\n}\r\nfunction VacancyList(props: IProp) {\r\n  const { vacancyData, spinnerStatus } = props;\r\n\r\n  return (\r\n    <div className=\"vacancy-list__wrapper\">\r\n      <section className=\"main-page_vacancy-list\">\r\n        {spinnerStatus ? (\r\n          <Loader />\r\n        ) : !vacancyData.length ? (\r\n          <NoFavoriteVacancyMessage />\r\n        ) : (\r\n          vacancyData.map((vacancy) => <VacancyItem key={nanoid()} data={vacancy} />)\r\n        )}\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VacancyList;\r\n","import React from 'react';\r\n\r\nconst SearchFormInputGlass = () => {\r\n  return (\r\n    <>\r\n      <svg\r\n        className=\"search-form-input-glass\"\r\n        width=\"15\"\r\n        height=\"15\"\r\n        viewBox=\"0 0 15 15\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          d=\"M10.468 10.468L13.5714 13.5714M12.0924 6.54622C12.0924 9.60931 9.60931 12.0924 6.54622 12.0924C3.48313 12.0924 1 9.60931 1 6.54622C1 3.48313 3.48313 1 6.54622 1C9.60931 1 12.0924 3.48313 12.0924 6.54622Z\"\r\n          stroke=\"#ACADB9\"\r\n          strokeWidth=\"1.5\"\r\n          strokeLinecap=\"round\"\r\n        />\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchFormInputGlass;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './mainPageSearchForm.scss';\r\nimport SearchFormInputGlass from '../../ui/SearchFormInputGlass';\r\nimport { SubmitHandler, useForm } from 'react-hook-form';\r\nimport { IFetchQuery } from '../../types/requestTypes';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { queryString2 } from '../../redux/handlers/handlers';\r\nimport { fetchGetVacancy } from '../../redux/data-slice/dataFetchRequest';\r\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\r\nimport { setFetchQuery } from '../../redux/data-slice/dataSlice';\r\nimport { setCurrentPage, setNumIndex } from '../../redux/paginator-slice/paginationStateSlice';\r\ntype searchInput = {\r\n  searchInput: string;\r\n};\r\n\r\nfunction MainPageSearchForm() {\r\n  const dispatch = useAppDispatch();\r\n  const fetchQuery = useAppSelector((state) => state.dataSlice.fetchQuery);\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, setSearchParams] = useSearchParams();\r\n  const [back, setBack] = useState<boolean>(false);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    setFocus,\r\n    formState: { isValid },\r\n  } = useForm<searchInput>({\r\n    mode: 'all',\r\n    defaultValues: {\r\n      searchInput: fetchQuery?.keyword,\r\n    },\r\n  });\r\n  const searchVacancyHandler: SubmitHandler<searchInput> = (data: searchInput) => {\r\n    const fetchQueryData: IFetchQuery = {\r\n      ...fetchQuery,\r\n      page: 1,\r\n      keyword: data.searchInput,\r\n    };\r\n    const string = queryString2(fetchQueryData);\r\n    setSearchParams(string);\r\n    dispatch(setFetchQuery(fetchQueryData));\r\n    dispatch(setCurrentPage(1));\r\n    dispatch(setNumIndex(0));\r\n    dispatch(fetchGetVacancy(queryString2(fetchQueryData)));\r\n  };\r\n\r\n  const backToAllVacancies = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const fetchQueryData: IFetchQuery = {\r\n      ...fetchQuery,\r\n      page: 1,\r\n      keyword: '',\r\n    };\r\n\r\n    if (e.currentTarget.value.length < 1 && !!fetchQuery?.keyword) {\r\n      const string = queryString2(fetchQueryData);\r\n      setSearchParams(string);\r\n      dispatch(fetchGetVacancy(queryString2(fetchQueryData)));\r\n      dispatch(setCurrentPage(1));\r\n      dispatch(setFetchQuery(fetchQueryData));\r\n      setBack(true);\r\n    }\r\n  };\r\n  useEffect(\r\n    () => setFocus('searchInput'),\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n  useEffect(() => {\r\n    back && reset();\r\n  }, [back, reset]);\r\n  return (\r\n    <form className=\"main-page_search-form\" onSubmit={handleSubmit(searchVacancyHandler)}>\r\n      <SearchFormInputGlass />\r\n      <input\r\n        className=\"main-page_search-form__input\"\r\n        data-elem=\"search-input\"\r\n        type=\"search\"\r\n        {...register('searchInput', {\r\n          onChange: (e: React.ChangeEvent<HTMLInputElement>) => backToAllVacancies(e),\r\n          required: true,\r\n          minLength: 1, //{ value: 1, message: 'Упс, минимум 3 символа' },\r\n        })}\r\n        placeholder=\"Введите название вакансии\"\r\n      />\r\n      <button\r\n        className=\"main-page_search-form__submit-button\"\r\n        data-elem=\"search-button\"\r\n        disabled={!isValid}\r\n      >\r\n        Поиск\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default MainPageSearchForm;\r\n","import React from 'react';\r\nimport { ICatalogues } from '../types/vacancyTypes';\r\n\r\ninterface IProp {\r\n  industry: ICatalogues;\r\n}\r\n\r\nconst IndustrySelectOption = (props: IProp) => {\r\n  const { industry } = props;\r\n\r\n  return (\r\n    <option className=\"select-industry_option\" value={industry.key} id={String(industry.key)}>\r\n      {industry.title_trimmed}\r\n    </option>\r\n  );\r\n};\r\n\r\nexport default IndustrySelectOption;\r\n","import React from 'react';\r\nimport { useAppSelector } from '../redux/hooks';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport IndustrySelectOption from './IndustrySelectOption';\r\n\r\ninterface IProp {\r\n  name: string;\r\n  onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n  onBlur: (e: React.FocusEvent<HTMLSelectElement>) => void;\r\n  required: boolean;\r\n}\r\nconst IndustriSeLect = React.forwardRef(\r\n  (props: IProp, ref: React.LegacyRef<HTMLSelectElement> | undefined) => {\r\n    const industryList = useAppSelector((state) => state.dataSlice.industryList);\r\n    const { name, onChange, onBlur } = props;\r\n\r\n    return (\r\n      <>\r\n        <label htmlFor=\"select-industry\" className=\"filter-form_title\">\r\n          Отрасль\r\n        </label>\r\n        <select\r\n          ref={ref}\r\n          id=\"select-industry\"\r\n          name={name}\r\n          onChange={onChange}\r\n          onBlur={onBlur}\r\n          className=\"filter-form_select-industry\"\r\n          data-elem=\"industry-select\"\r\n          defaultValue=\"\"\r\n        >\r\n          <option className=\"select-industry_option\" disabled value=\"\">\r\n            Выберете отрасль\r\n          </option>\r\n          {industryList.map((industry) => (\r\n            <IndustrySelectOption key={nanoid()} industry={industry} />\r\n          ))}\r\n        </select>\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default IndustriSeLect;\r\n","import React from 'react';\r\ninterface IProp {\r\n  id: string;\r\n  placeholder: string;\r\n  name: string;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  onBlur: (e: React.FocusEvent<HTMLInputElement>) => void;\r\n  required: boolean;\r\n  testAtribute: string;\r\n}\r\nconst PaymentInput = React.forwardRef(\r\n  (props: IProp, ref: React.LegacyRef<HTMLInputElement> | undefined) => {\r\n    const { id, placeholder, name, onChange, onBlur, testAtribute } = props;\r\n    return (\r\n      <>\r\n        <input\r\n          name={name}\r\n          type=\"number\"\r\n          ref={ref}\r\n          id={id}\r\n          step={500}\r\n          min={0}\r\n          onChange={onChange}\r\n          onBlur={onBlur}\r\n          className=\"filter-form_payment_input\"\r\n          placeholder={placeholder}\r\n          data-elem={testAtribute}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default PaymentInput;\r\n","import React from 'react';\r\n\r\nconst ResetButtonSVG = () => {\r\n  return (\r\n    <>\r\n      <svg\r\n        width=\"16\"\r\n        height=\"16\"\r\n        viewBox=\"0 0 16 16\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className=\"cross\"\r\n      >\r\n        <line\r\n          x1=\"11.7425\"\r\n          y1=\"4.44219\"\r\n          x2=\"4.44197\"\r\n          y2=\"11.7427\"\r\n          stroke=\"#ACADB9\"\r\n          strokeWidth=\"1.25\"\r\n        />\r\n        <line\r\n          x1=\"11.9013\"\r\n          y1=\"11.7425\"\r\n          x2=\"4.60082\"\r\n          y2=\"4.44197\"\r\n          stroke=\"#ACADB9\"\r\n          strokeWidth=\"1.25\"\r\n        />\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ResetButtonSVG;\r\n","import React from 'react';\r\nimport './BackToVacancyButton ';\r\nimport ResetButtonSVG from '../ResetButtonSVG';\r\nimport { IFetchQuery } from '../../types/requestTypes';\r\nimport { fetchGetVacancy } from '../../redux/data-slice/dataFetchRequest';\r\nimport { setFetchQuery } from '../../redux/data-slice/dataSlice';\r\nimport { queryString2 } from '../../redux/handlers/handlers';\r\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\r\nimport { useSearchParams } from 'react-router-dom';\r\ninterface IProp {\r\n  setIsResetForm: (arg: boolean) => void;\r\n}\r\nconst ResetButton = (props: IProp) => {\r\n  const dispatch = useAppDispatch();\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, setSearchParam] = useSearchParams();\r\n  const { setIsResetForm } = props;\r\n  const fetchQuery = useAppSelector((state) => state.dataSlice.fetchQuery);\r\n\r\n  const resetButtonHandler = () => {\r\n    const fetchQueryData: IFetchQuery = {\r\n      published: 1,\r\n      page: 1,\r\n      keyword: fetchQuery?.keyword,\r\n      catalogues: '',\r\n      payment_from: 0,\r\n      payment_to: 0,\r\n    };\r\n    setIsResetForm(true);\r\n    const string = queryString2(fetchQueryData);\r\n    setSearchParam(string);\r\n    dispatch(fetchGetVacancy(string));\r\n    dispatch(setFetchQuery(fetchQueryData));\r\n  };\r\n  return (\r\n    <button id=\"reset-button\" onClick={resetButtonHandler} className=\"filter-form_reset-button\">\r\n      <ResetButtonSVG />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ResetButton;\r\n","import React from 'react';\r\nimport { useAppSelector } from '../redux/hooks';\r\n\r\nconst OpenFoemSVG = () => {\r\n  const isFormOpen = useAppSelector((state) => state.dataSlice.isFormOpen);\r\n  return (\r\n    <>\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        version=\"1.1\"\r\n        width=\"16\"\r\n        height=\"16\"\r\n        viewBox=\"0 0 256 256\"\r\n        xmlSpace=\"preserve\"\r\n      >\r\n        <g\r\n          stroke=\"none\"\r\n          strokeWidth=\"0\"\r\n          strokeDasharray=\"nonee\"\r\n          strokeLinecap=\"butt\"\r\n          strokeLinejoin=\"miter\"\r\n          fill=\"none\"\r\n          fillRule=\"nonzero\"\r\n          opacity=\"1\"\r\n          transform=\"translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)\"\r\n        >\r\n          <path\r\n            d=\"M 45 90 c -0.896 0 -1.792 -0.342 -2.475 -1.025 L 2.734 49.184 c -1.367 -1.366 -1.367 -3.583 0 -4.949 c 1.367 -1.367 3.583 -1.367 4.95 0 L 45 81.55 l 37.316 -37.315 c 1.367 -1.367 3.582 -1.367 4.949 0 c 1.367 1.366 1.367 3.583 0 4.949 L 47.475 88.975 C 46.791 89.658 45.896 90 45 90 z\"\r\n            stroke=\"none\"\r\n            strokeWidth=\"1\"\r\n            strokeDasharray=\"none\"\r\n            strokeLinecap=\"butt\"\r\n            strokeMiterlimit=\"10\"\r\n            fill={isFormOpen ? '#3B7CD3' : 'rgb(0,0,0)'}\r\n            fillRule=\"nonzero\"\r\n            opacity=\"1\"\r\n            transform=\" matrix(1 0 0 1 0 0)\"\r\n          />\r\n          <path\r\n            d=\"M 84.791 29.794 H 5.209 c -1.933 0 -3.5 -1.567 -3.5 -3.5 c 0 -1.933 1.567 -3.5 3.5 -3.5 h 79.582 c 1.933 0 3.5 1.567 3.5 3.5 C 88.291 28.227 86.724 29.794 84.791 29.794 z\"\r\n            stroke=\"none\"\r\n            strokeWidth=\"1\"\r\n            strokeDasharray=\"none\"\r\n            strokeLinecap=\"butt\"\r\n            strokeMiterlimit=\"10\"\r\n            fill={isFormOpen ? '#3B7CD3' : 'rgb(0,0,0)'}\r\n            fillRule=\"nonzero\"\r\n            opacity=\"1\"\r\n            transform=\" matrix(1 0 0 1 0 0)\"\r\n          />\r\n          <path\r\n            d=\"M 84.791 7 H 5.209 c -1.933 0 -3.5 -1.567 -3.5 -3.5 S 3.276 0 5.209 0 h 79.582 c 1.933 0 3.5 1.567 3.5 3.5 S 86.724 7 84.791 7 z\"\r\n            stroke=\"none\"\r\n            strokeWidth=\"1\"\r\n            strokeDasharray=\"none\"\r\n            strokeLinecap=\"butt\"\r\n            strokeMiterlimit=\"10\"\r\n            fill={isFormOpen ? '#3B7CD3' : 'rgb(0,0,0)'}\r\n            fillRule=\"nonzero\"\r\n            opacity=\"1\"\r\n            transform=\" matrix(1 0 0 1 0 0)\"\r\n          />\r\n        </g>\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OpenFoemSVG;\r\n","import React from 'react';\r\nimport OpenFoemSVG from '../OpenFoemSVG';\r\nimport './buttonStyle.scss';\r\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\r\nimport { setOpenForm } from '../../redux/data-slice/dataSlice';\r\n\r\nconst OpenFormButton = () => {\r\n  const dispatch = useAppDispatch();\r\n  const isFormOpen = useAppSelector((state) => state.dataSlice.isFormOpen);\r\n  return (\r\n    <button\r\n      className={isFormOpen ? 'close-form-button' : 'open-form-button'}\r\n      onClick={() => dispatch(setOpenForm(!isFormOpen))}\r\n    >\r\n      <OpenFoemSVG />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default OpenFormButton;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './filterForm.scss';\r\nimport IndustriSeLect from '../../ui/IndustriSeLect';\r\nimport PaymentInput from '../../ui/PaymentInput';\r\nimport ResetButton from '../../ui/buttons/ResetButton';\r\n\r\nimport { IFetchQuery, IFilterFormData } from '../../types/requestTypes';\r\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\r\nimport { useForm, SubmitHandler } from 'react-hook-form';\r\nimport { queryString2 } from '../../redux/handlers/handlers';\r\nimport { setFetchQuery } from '../../redux/data-slice/dataSlice';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { fetchGetCatalogues, fetchGetVacancy } from '../../redux/data-slice/dataFetchRequest';\r\nimport OpenFormButton from '../../ui/buttons/OpenFormButton';\r\n\r\nfunction FilterForm() {\r\n  const dispatch = useAppDispatch();\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, setSearchParam] = useSearchParams();\r\n  const [isResetForm, setIsResetForm] = useState<boolean>(false);\r\n  const fetchQuery = useAppSelector((state) => state.dataSlice.fetchQuery);\r\n  const isFormOpen = useAppSelector((state) => state.dataSlice.isFormOpen);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { isDirty },\r\n  } = useForm<IFilterFormData>({\r\n    mode: 'all',\r\n  });\r\n\r\n  const industrySelect = register('catalogues', {\r\n    required: false,\r\n  });\r\n  const paymentFrom = register('payment_from', {\r\n    required: false,\r\n  });\r\n  const paymentTo = register('payment_to', {\r\n    required: false,\r\n  });\r\n\r\n  const filterFormHandler: SubmitHandler<IFilterFormData> = (data: IFilterFormData) => {\r\n    const fetchQueryData: IFetchQuery = {\r\n      published: 1,\r\n      page: 1,\r\n      keyword: fetchQuery?.keyword,\r\n      ...data,\r\n    };\r\n    dispatch(setFetchQuery(fetchQueryData));\r\n    const string = queryString2(fetchQueryData);\r\n    setSearchParam(string);\r\n    dispatch(fetchGetVacancy(string));\r\n    setIsResetForm(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchGetCatalogues(''));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    isResetForm && reset();\r\n  }, [isResetForm, reset]);\r\n\r\n  return (\r\n    <form\r\n      className={`filter-form${isFormOpen ? '' : '_close'}`}\r\n      onSubmit={handleSubmit(filterFormHandler)}\r\n    >\r\n      <div className=\"filter-form_title-block\">\r\n        <h3 className=\"filter-form_title\">Фильтры</h3>\r\n        {isFormOpen ? (\r\n          <div className=\"filter-form_reset-button-block\">\r\n            <label htmlFor=\"reset-button\" className=\"filter-form_reset-button_label\">\r\n              Сбросить все\r\n            </label>\r\n            <ResetButton setIsResetForm={setIsResetForm} />\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n      <section className=\"filter-form_input-block\">\r\n        <IndustriSeLect\r\n          name={industrySelect.name}\r\n          ref={industrySelect.ref}\r\n          onChange={industrySelect.onChange}\r\n          onBlur={industrySelect.onBlur}\r\n          required={industrySelect.required!}\r\n        />\r\n        <label htmlFor=\"payment_from\" className=\"filter-form_title\">\r\n          Оклад\r\n        </label>\r\n        <PaymentInput\r\n          id={'payment_from'}\r\n          placeholder={'От'}\r\n          name={paymentFrom.name}\r\n          ref={paymentFrom.ref}\r\n          onChange={paymentFrom.onChange}\r\n          onBlur={paymentFrom.onBlur}\r\n          required={paymentFrom.required!}\r\n          testAtribute={'salary-from-input'}\r\n        />\r\n        <PaymentInput\r\n          id={'payment_to'}\r\n          placeholder={'До'}\r\n          name={paymentTo.name}\r\n          ref={paymentTo.ref}\r\n          onChange={paymentTo.onChange}\r\n          onBlur={paymentTo.onBlur}\r\n          required={paymentTo.required!}\r\n          testAtribute={'salary-to-input'}\r\n        />\r\n      </section>\r\n\r\n      <button disabled={!isDirty} className=\"filter-form__filter-button\" data-elem=\"search-button\">\r\n        Применить\r\n      </button>\r\n      <OpenFormButton />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default FilterForm;\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport './mainPage.scss';\r\nimport MainPageSearchForm from '../../components/main-page-search-form/MainPageSearchForm';\r\nimport VacancyList from '../../components/vacancy-list/VacancyList';\r\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\r\nimport { fetchGetVacancy } from '../../redux/data-slice/dataFetchRequest';\r\nimport Paginator from '../../components/paginator/Paginator';\r\nimport { IFetchQuery } from '../../types/requestTypes';\r\nimport { setFirstAndLastPaginationPages } from '../../redux/paginator-slice/paginationStateSlice';\r\nimport Loader from '../../components/loader/Loader';\r\nimport { createAllButtonsNumberNote, queryString2 } from '../../redux/handlers/handlers';\r\nimport FilterForm from '../../components/filter-form/FilterForm';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction MainPage() {\r\n  const dispatch = useAppDispatch();\r\n  const location = useLocation();\r\n  const spinnerStatus = useAppSelector((state) => state.dataSlice.spinnerStatus);\r\n  const vacancyData = useAppSelector((state) => state.dataSlice.data);\r\n  const totalVacancies = useAppSelector((state) => state.dataSlice.totalVacancies);\r\n  const numIndex = useAppSelector((state) => state.paginationStateSlice.numIndex);\r\n  const pagesAmmount = useAppSelector((state) => state.dataSlice.pagesAmount);\r\n\r\n  useEffect(() => {\r\n    const fetchQueryData: IFetchQuery = {\r\n      published: 1,\r\n      page: 1,\r\n      keyword: '',\r\n      catalogues: '',\r\n      payment_from: 0,\r\n      payment_to: 0,\r\n    };\r\n    !!location.search\r\n      ? dispatch(fetchGetVacancy(location.search))\r\n      : dispatch(fetchGetVacancy(queryString2(fetchQueryData)));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const buttonCreate = useCallback(() => {\r\n    return createAllButtonsNumberNote(pagesAmmount, numIndex);\r\n  }, [numIndex, pagesAmmount]);\r\n\r\n  useEffect(() => {\r\n    const firstAndLastPaginationPages = {\r\n      firstPaginationPage: Math.min(...buttonCreate()[numIndex]),\r\n      lastPaginationPage: Math.max(...buttonCreate()[numIndex]),\r\n    };\r\n    dispatch(setFirstAndLastPaginationPages(firstAndLastPaginationPages));\r\n  }, [buttonCreate, dispatch, numIndex]);\r\n\r\n  return (\r\n    <section className=\"page main-page\">\r\n      <div className=\"main-page_container\">\r\n        <FilterForm />\r\n        <section className=\"main-page_vacancy-block\">\r\n          {spinnerStatus && <Loader />}\r\n          <MainPageSearchForm />\r\n          <VacancyList vacancyData={vacancyData} />\r\n          {!!vacancyData.length ? (\r\n            <Paginator\r\n              numIndex={numIndex}\r\n              pagesAmmount={pagesAmmount}\r\n              totalVacancies={totalVacancies}\r\n            />\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </section>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default MainPage;\r\n"],"names":["memo","props","dispatch","useAppDispatch","location","useLocation","numIndex","buttonCreate","currentPage","useAppSelector","state","paginationStateSlice","currentPageForFavoritePage","_useState","useState","_useState2","_slicedToArray","hilightButton","setHiligthButton","_useSearchParams","useSearchParams","_useSearchParams2","setSearchParams","fetchQuery","dataSlice","useEffect","pathname","includes","_jsx","_Fragment","children","length","map","item","className","id","String","disabled","onClick","e","fetchQueryData","_objectSpread","page","Number","currentTarget","setCurrentPageForFavoritePage","setCurrentPage","setFetchQuery","fetchGetVacancy","queryString2","trim","createPaginationQueryForFetch","nanoid","width","height","viewBox","fill","xmlns","d","contexClass","firstAndLastPaginationPages","concat","setNumIndexFavoritePage","setNumIndex","lastPaginationPage","firstPaginationPage","arrowButtonHandler","PaginationArrowSVG","pagesAmmount","totalVacancies","pageCounter","pageCount","disabledLeftArrow","setDisabledLeftArrow","_useState3","_useState4","disabledRightArrow","setDisabledRightArrow","useCallback","createAllButtonsNumberNote","Math","min","apply","_toConsumableArray","max","setFirstAndLastPaginationPages","_jsxs","PaginationArrowButton","PageButtonList","stroke","strokeWidth","strokeLinecap","strokeLinejoin","favoriteVacancyList","some","vacancy","stopPropagation","setFavoriteVacancy","addFavoriteVacancyButtonHandler","StarSVG","data","navigate","useNavigate","profession","payment_from","payment_to","currency","type_of_work","title","LocationPointSVG","town","AddFavoriteVacancyButton","vacancyData","spinnerStatus","Loader","VacancyItem","NoFavoriteVacancyMessage","back","setBack","_useForm","useForm","mode","defaultValues","searchInput","keyword","register","handleSubmit","reset","setFocus","isValid","formState","onSubmit","string","SearchFormInputGlass","type","onChange","value","backToAllVacancies","required","minLength","placeholder","industry","key","title_trimmed","React","ref","industryList","name","onBlur","htmlFor","defaultValue","IndustrySelectOption","testAtribute","step","x1","y1","x2","y2","setSearchParam","setIsResetForm","published","catalogues","ResetButtonSVG","isFormOpen","version","xmlSpace","strokeDasharray","fillRule","opacity","transform","strokeMiterlimit","setOpenForm","OpenFoemSVG","isResetForm","isDirty","industrySelect","paymentFrom","paymentTo","fetchGetCatalogues","ResetButton","IndustriSeLect","PaymentInput","OpenFormButton","pagesAmount","search","FilterForm","MainPageSearchForm","VacancyList","Paginator"],"sourceRoot":""}