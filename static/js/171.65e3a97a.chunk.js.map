{"version":3,"file":"static/js/171.65e3a97a.chunk.js","mappings":"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","sources":["components/paginator/PageButtonList.tsx","ui/PaginationArrowSVG.tsx","ui/buttons/PaginationArrowButton.tsx","components/paginator/Paginator.tsx","ui/LocationPointSVG.tsx","ui/StarSVG.tsx","ui/buttons/AddFavoriteVacancYButton.tsx","components/vacancy-item/VacancyItem.tsx","components/vacancy-list/VacancyList.tsx","pages/favoriteVacancyPage/FavoriteVacancyPage.tsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from 'nanoid';\r\nimport React, { memo, useEffect, useState } from 'react';\r\nimport { useLocation, useSearchParams } from 'react-router-dom';\r\nimport { fetchGetVacancy } from '../../redux/data-slice/dataFetchRequest';\r\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\r\nimport {\r\n  setCurrentPageForFavoritePage,\r\n  setCurrentPage,\r\n} from '../../redux/paginator-slice/paginationStateSlice';\r\nimport { IFetchQuery } from '../../types/requestTypes';\r\nimport { queryString2 } from '../../redux/handlers/handlers';\r\nimport { setFetchQuery } from '../../redux/data-slice/dataSlice';\r\n\r\ninterface IProp {\r\n  numIndex: number;\r\n  pagesAmmount: number;\r\n  buttonCreate: () => number[][];\r\n}\r\n\r\nconst PageButtonList = memo((props: IProp) => {\r\n  const dispatch = useAppDispatch();\r\n  const location = useLocation();\r\n  const { numIndex, buttonCreate } = props;\r\n  const currentPage = useAppSelector((state) => state.paginationStateSlice.currentPage);\r\n  const currentPageForFavoritePage = useAppSelector(\r\n    (state) => state.paginationStateSlice.currentPageForFavoritePage\r\n  );\r\n\r\n  const [hilightButton, setHiligthButton] = useState<number>(0);\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, setSearchParams] = useSearchParams();\r\n  const fetchQuery = useAppSelector((state) => state.dataSlice.fetchQuery);\r\n\r\n  const createPaginationQueryForFetch = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    const fetchQueryData: IFetchQuery = {\r\n      ...fetchQuery,\r\n    };\r\n\r\n    fetchQueryData.page = Number(e.currentTarget.id);\r\n\r\n    location.pathname.includes('favorite') &&\r\n      dispatch(setCurrentPageForFavoritePage(Number(e.currentTarget.id)));\r\n\r\n    !location.pathname.includes('favorite') && dispatch(setCurrentPage(Number(e.currentTarget.id)));\r\n\r\n    dispatch(setFetchQuery(fetchQueryData));\r\n\r\n    dispatch(fetchGetVacancy(queryString2(fetchQueryData)));\r\n    setSearchParams(queryString2(fetchQueryData).trim());\r\n  };\r\n  useEffect(\r\n    () =>\r\n      location.pathname.includes('favorite')\r\n        ? setHiligthButton(currentPageForFavoritePage)\r\n        : setHiligthButton(currentPage),\r\n    [currentPage, currentPageForFavoritePage, location.pathname]\r\n  );\r\n  return (\r\n    <>\r\n      {!!buttonCreate().length ? (\r\n        buttonCreate()[numIndex].map((item) => (\r\n          <button\r\n            className=\"btn-page\"\r\n            key={nanoid()}\r\n            id={String(item)}\r\n            disabled={item === hilightButton ? true : false}\r\n            onClick={(e: React.MouseEvent<HTMLButtonElement>) => createPaginationQueryForFetch(e)}\r\n          >\r\n            <span id={String(item)} className=\"btn-page-text\">\r\n              {item}\r\n            </span>\r\n          </button>\r\n        ))\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n});\r\nexport default PageButtonList;\r\n","import React from 'react';\r\ninterface IProp {\r\n  disabled: boolean;\r\n}\r\nconst PaginationArrowSVG = (props: IProp) => {\r\n  return (\r\n    <>\r\n      <svg\r\n        className=\"arrowSVG\"\r\n        width=\"30\"\r\n        height=\"30\"\r\n        viewBox=\"0 0 32 32\"\r\n        fill={props.disabled ? '#5E96FC' : 'none'}\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        {/* <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"3.5\" fill=\"white\" /> */}\r\n        <path\r\n          d=\"M15.367 16L18.667 12.7L17.724 11.757L13.481 16L17.724 20.243L18.667 19.3L15.367 16Z\"\r\n          fill={props.disabled ? '#FFFFFF' : '#7B7C88'}\r\n        />\r\n        {/* <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"3.5\" stroke=\"#D5D6DC\" />*/}\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PaginationArrowSVG;\r\n","import React from 'react';\r\nimport PaginationArrowSVG from '../PaginationArrowSVG';\r\nimport { useLocation, useSearchParams } from 'react-router-dom';\r\nimport { fetchGetVacancy } from '../../redux/data-slice/dataFetchRequest';\r\nimport { setFetchQuery } from '../../redux/data-slice/dataSlice';\r\nimport { queryString2 } from '../../redux/handlers/handlers';\r\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\r\nimport {\r\n  setNumIndexFavoritePage,\r\n  setNumIndex,\r\n  setCurrentPageForFavoritePage,\r\n  setCurrentPage,\r\n} from '../../redux/paginator-slice/paginationStateSlice';\r\nimport { IFetchQuery } from '../../types/requestTypes';\r\ninterface IProp {\r\n  id: string;\r\n  contexClass: string;\r\n  numIndex: number;\r\n  disabled: boolean;\r\n}\r\nconst PaginationArrowButton = (props: IProp) => {\r\n  const { id, contexClass, numIndex, disabled } = props;\r\n\r\n  const dispatch = useAppDispatch();\r\n  const location = useLocation();\r\n  const firstAndLastPaginationPages = useAppSelector(\r\n    (state) => state.paginationStateSlice.firstAndLastPaginationPages\r\n  );\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, setSearchParams] = useSearchParams();\r\n  const fetchQuery = useAppSelector((state) => state.dataSlice.fetchQuery);\r\n\r\n  const arrowButtonHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    const fetchQueryData: IFetchQuery = {\r\n      ...fetchQuery,\r\n    };\r\n\r\n    if (e.currentTarget.id === 'right-arrow') {\r\n      location.pathname.includes('favorite')\r\n        ? dispatch(setNumIndexFavoritePage(numIndex + 1))\r\n        : dispatch(setNumIndex(numIndex + 1));\r\n\r\n      fetchQueryData.page = firstAndLastPaginationPages.lastPaginationPage + 1;\r\n    }\r\n\r\n    if (e.currentTarget.id === 'left-arrow') {\r\n      location.pathname.includes('favorite')\r\n        ? dispatch(setNumIndexFavoritePage(numIndex - 1))\r\n        : dispatch(setNumIndex(numIndex - 1));\r\n\r\n      fetchQueryData.page = firstAndLastPaginationPages.firstPaginationPage - 1;\r\n    }\r\n\r\n    !location.pathname.includes('favorite') &&\r\n      dispatch(fetchGetVacancy(queryString2(fetchQueryData)));\r\n    dispatch(setFetchQuery(fetchQueryData));\r\n\r\n    location.pathname.includes('favorite')\r\n      ? dispatch(setCurrentPageForFavoritePage(Number(fetchQueryData.page)))\r\n      : dispatch(setCurrentPage(Number(fetchQueryData.page)));\r\n\r\n    setSearchParams(queryString2(fetchQueryData));\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={`btn-arrow ${contexClass}`}\r\n      id={id}\r\n      onClick={(e: React.MouseEvent<HTMLButtonElement>) => arrowButtonHandler(e)}\r\n      disabled={disabled}\r\n    >\r\n      <PaginationArrowSVG disabled={disabled} />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default PaginationArrowButton;\r\n","import './paginator-style.scss';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { createAllButtonsNumberNote } from '../../redux/handlers/handlers';\r\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\r\nimport { setFirstAndLastPaginationPages } from '../../redux/paginator-slice/paginationStateSlice';\r\nimport PageButtonList from './PageButtonList';\r\nimport PaginationArrowButton from '../../ui/buttons/PaginationArrowButton';\r\ninterface IProp {\r\n  numIndex: number;\r\n  pagesAmmount: number;\r\n  totalVacancies: number;\r\n  buttonCreate?: () => number[][];\r\n}\r\n\r\nfunction Paginator(props: IProp) {\r\n  const { numIndex, pagesAmmount, totalVacancies } = props;\r\n  const dispatch = useAppDispatch();\r\n  const location = useLocation();\r\n  const pageCounter = useAppSelector((state) => state.dataSlice.pageCount);\r\n  const [disabledLeftArrow, setDisabledLeftArrow] = useState<boolean>(true);\r\n  const [disabledRightArrow, setDisabledRightArrow] = useState<boolean>(false);\r\n  const firstAndLastPaginationPages = useAppSelector(\r\n    (state) => state.paginationStateSlice.firstAndLastPaginationPages\r\n  );\r\n\r\n  const buttonCreate = useCallback(() => {\r\n    return createAllButtonsNumberNote(pagesAmmount, numIndex);\r\n  }, [numIndex, pagesAmmount]);\r\n\r\n  useEffect(() => {\r\n    const firstAndLastPaginationPages = {\r\n      firstPaginationPage: Math.min(...buttonCreate()[numIndex]),\r\n      lastPaginationPage: Math.max(...buttonCreate()[numIndex]),\r\n    };\r\n\r\n    dispatch(setFirstAndLastPaginationPages(firstAndLastPaginationPages));\r\n  }, [buttonCreate, dispatch, location.pathname, numIndex]);\r\n\r\n  useEffect(() => {\r\n    setDisabledLeftArrow(firstAndLastPaginationPages.firstPaginationPage - 1 <= 1);\r\n    setDisabledRightArrow(\r\n      (firstAndLastPaginationPages.lastPaginationPage - 1) * Number(pageCounter) >=\r\n        totalVacancies - Number(pageCounter)\r\n    );\r\n  }, [\r\n    totalVacancies,\r\n    firstAndLastPaginationPages.lastPaginationPage,\r\n    location.pathname,\r\n    numIndex,\r\n    pageCounter,\r\n    firstAndLastPaginationPages.firstPaginationPage,\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"paginator-wrapper\">\r\n      <div className=\"paginator\">\r\n        <PaginationArrowButton\r\n          id={'left-arrow'}\r\n          contexClass={'left-arrow'}\r\n          numIndex={numIndex}\r\n          disabled={disabledLeftArrow}\r\n        />\r\n        {buttonCreate().length ? (\r\n          <PageButtonList\r\n            numIndex={numIndex}\r\n            pagesAmmount={pagesAmmount}\r\n            buttonCreate={buttonCreate}\r\n          />\r\n        ) : (\r\n          <></>\r\n        )}\r\n        <PaginationArrowButton\r\n          id={'right-arrow'}\r\n          contexClass={'right-arrow'}\r\n          numIndex={numIndex}\r\n          disabled={disabledRightArrow}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Paginator;\r\n","import React from 'react';\r\n\r\nconst LocationPointSVG = () => {\r\n  return (\r\n    <>\r\n      <svg\r\n        width=\"16\"\r\n        height=\"18\"\r\n        viewBox=\"0 0 16 18\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          d=\"M12.714 12.8807C11.9335 13.6612 10.3013 15.2935 9.17814 16.4166C8.52727 17.0675 7.47304 17.0678 6.82217 16.4169C5.7186 15.3134 4.11797 13.7127 3.28593 12.8807C0.682439 10.2772 0.682439 6.05612 3.28593 3.45262C5.88943 0.849126 10.1105 0.849126 12.714 3.45262C15.3175 6.05612 15.3175 10.2772 12.714 12.8807Z\"\r\n          stroke=\"#ACADB9\"\r\n          strokeWidth=\"1.25\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        />\r\n        <path\r\n          d=\"M10.5 8.16667C10.5 9.54738 9.38069 10.6667 7.99998 10.6667C6.61927 10.6667 5.49998 9.54738 5.49998 8.16667C5.49998 6.78595 6.61927 5.66667 7.99998 5.66667C9.38069 5.66667 10.5 6.78595 10.5 8.16667Z\"\r\n          stroke=\"#ACADB9\"\r\n          strokeWidth=\"1.25\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        />\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LocationPointSVG;\r\n","import React from 'react';\r\nimport { useAppSelector } from '../redux/hooks';\r\ninterface IProp {\r\n  id: string;\r\n}\r\nconst StarSVG = (props: IProp) => {\r\n  const favoriteVacancyList = useAppSelector((state) => state.dataSlice.favoriteVacancyList);\r\n  return (\r\n    <>\r\n      <svg\r\n        width=\"22\"\r\n        height=\"20\"\r\n        viewBox=\"0 0 22 20\"\r\n        fill={\r\n          favoriteVacancyList.some((vacancy) => Number(vacancy.id) === Number(props.id))\r\n            ? '#5E96FC'\r\n            : 'none'\r\n        }\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className=\"star\"\r\n      >\r\n        <path\r\n          d=\"M9.97183 1.70846C10.4382 0.933481 11.5618 0.933482 12.0282 1.70847L14.3586 5.58087C14.5262 5.85928 14.7995 6.05784 15.116 6.13116L19.5191 7.15091C20.4002 7.35499 20.7474 8.42356 20.1545 9.10661L17.1918 12.5196C16.9788 12.765 16.8744 13.0863 16.9025 13.41L17.2932 17.9127C17.3714 18.8138 16.4625 19.4742 15.6296 19.1214L11.4681 17.3583C11.1689 17.2316 10.8311 17.2316 10.5319 17.3583L6.37038 19.1214C5.53754 19.4742 4.62856 18.8138 4.70677 17.9127L5.09754 13.41C5.12563 13.0863 5.02124 12.765 4.80823 12.5196L1.8455 9.1066C1.25257 8.42356 1.59977 7.35499 2.48095 7.15091L6.88397 6.13116C7.20053 6.05784 7.47383 5.85928 7.64138 5.58087L9.97183 1.70846Z\"\r\n          stroke=\"#ACADB9\"\r\n          strokeWidth=\"1.5\"\r\n        />\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StarSVG;\r\n","import React from 'react';\r\nimport './buttonStyle.scss';\r\nimport { useAppDispatch } from '../../redux/hooks';\r\nimport { setFavoriteVacancy } from '../../redux/data-slice/dataSlice';\r\nimport StarSVG from '../StarSVG';\r\n\r\ninterface IProp {\r\n  id: string;\r\n}\r\n\r\nconst AddFavoriteVacancyButton = (props: IProp) => {\r\n  const dispatch = useAppDispatch();\r\n  const addFavoriteVacancyButtonHandler = (e: React.MouseEvent<HTMLElement>) => {\r\n    e.stopPropagation();\r\n    dispatch(setFavoriteVacancy(e.currentTarget.id));\r\n  };\r\n  return (\r\n    <button\r\n      id={props.id}\r\n      className=\"add-favorite-vacancy-button\"\r\n      data-elem={`vacancy-${props.id}-shortlist-button`}\r\n      onClick={(e: React.MouseEvent<HTMLButtonElement>) => addFavoriteVacancyButtonHandler(e)}\r\n    >\r\n      <StarSVG id={props.id} />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default AddFavoriteVacancyButton;\r\n","import React from 'react';\r\nimport './vacancyItem.scss';\r\nimport LocationPointSVG from '../../ui/LocationPointSVG';\r\nimport AddFavoriteVacancyButton from '../../ui/buttons/AddFavoriteVacancYButton';\r\nimport { IVacansy } from '../../types/vacancyTypes';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useAppDispatch } from '../../redux/hooks';\r\nimport { setCurrentVacancieId } from '../../redux/data-slice/dataSlice';\r\ninterface IProp {\r\n  data: IVacansy | null;\r\n}\r\n\r\nfunction VacancyItem(props: IProp) {\r\n  const data = props.data;\r\n  const dispatch = useAppDispatch();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  const vacancieItemHandler = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    navigate(`/vacancy/${data!.id}`);\r\n    if (!location.pathname.includes(`${data!.id}`)) {\r\n      navigate(`/vacancy/${data!.id}`);\r\n      dispatch(setCurrentVacancieId(e.currentTarget.id));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section\r\n      onClick={(e: React.MouseEvent<HTMLDivElement>) => vacancieItemHandler(e)}\r\n      className=\"vacancy\"\r\n      id={String(data!.id)}\r\n      data-elem={`vacancy-${String(data!.id)}`}\r\n    >\r\n      <article className=\"vacancy-short-info\">\r\n        {!location.pathname.includes(`${data!.id}`) ? (\r\n          <h3 className=\"vacancy-title\">{data!.profession}</h3>\r\n        ) : (\r\n          <h2 className=\"vacancy-title\">{data!.profession}</h2>\r\n        )}\r\n\r\n        <section className=\"vacancy-offers\">\r\n          <span className=\"vacancy-salary\">\r\n            {data!.payment_from <= 0 && data!.payment_to <= 0\r\n              ? `з/п не указана`\r\n              : data!.payment_from <= 0\r\n              ? null\r\n              : `з/п от ${data!.payment_from} ${data!.currency}`}\r\n          </span>\r\n          {data!.payment_to <= 0 || data!.payment_from <= 0 ? '' : <b>-</b>}\r\n          <span className=\"vacancy-salary\">\r\n            {data!.payment_from <= 0 && data!.payment_to <= 0\r\n              ? null\r\n              : data!.payment_from <= 0\r\n              ? `з/п до ${data!.payment_to} ${data!.currency}`\r\n              : data!.payment_to <= 0\r\n              ? null\r\n              : `до ${data!.payment_to} ${data!.currency}`}\r\n          </span>\r\n          <b>&bull;</b>\r\n          <span className=\"vacancy-working-mode\">{data!.type_of_work.title}</span>\r\n        </section>\r\n        <p className=\"vacancy-location\">\r\n          <span className=\"point\">\r\n            <LocationPointSVG />\r\n          </span>\r\n          <span className=\"city\">{data!.town.title}</span>\r\n        </p>\r\n      </article>\r\n      <AddFavoriteVacancyButton id={String(data!.id)} />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default VacancyItem;\r\n","import React from 'react';\r\nimport VacancyItem from '../vacancy-item/VacancyItem';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport { IVacansy } from '../../types/vacancyTypes';\r\nimport NoFavoriteVacancyMessage from '../nofavoriteVanacy/NoFavoriteVacancyMessage';\r\nimport Loader from '../loader/Loader';\r\n\r\ninterface IProp {\r\n  vacancyData: IVacansy[];\r\n  spinnerStatus?: boolean;\r\n}\r\nfunction VacancyList(props: IProp) {\r\n  const { vacancyData, spinnerStatus } = props;\r\n\r\n  return (\r\n    <div className=\"vacancy-list__wrapper\">\r\n      <section className=\"main-page_vacancy-list\">\r\n        {spinnerStatus ? (\r\n          <Loader />\r\n        ) : !vacancyData.length ? (\r\n          <NoFavoriteVacancyMessage />\r\n        ) : (\r\n          vacancyData.map((vacancy) => <VacancyItem key={nanoid()} data={vacancy} />)\r\n        )}\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VacancyList;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useAppSelector } from '../../redux/hooks';\r\nimport VacancyList from '../../components/vacancy-list/VacancyList';\r\nimport './favoritePage.scss';\r\nimport Paginator from '../../components/paginator/Paginator';\r\nimport { IVacansy } from '../../types/vacancyTypes';\r\nimport Loader from '../../components/loader/Loader';\r\nimport { favoriteVacancyListCreate } from '../../redux/handlers/handlers';\r\n\r\nfunction FavoriteVacancyPage() {\r\n  const numIndexFavoritePage = useAppSelector(\r\n    (state) => state.paginationStateSlice.numIndexFavoritePage\r\n  );\r\n\r\n  const currentPageForFavoritePage = useAppSelector(\r\n    (state) => state.paginationStateSlice.currentPageForFavoritePage\r\n  );\r\n  const pagesCount = useAppSelector((state) => state.dataSlice.pageCount);\r\n  const favoriteVacancyes = useAppSelector((state) => state.dataSlice.favoriteVacancyList);\r\n  const favoritePageButtonsAmount = useAppSelector(\r\n    (state) => state.dataSlice.favoritePageButtonsAmount\r\n  );\r\n  const [curentPageVacancyData, seCurentPageVacancyData] = useState<IVacansy[]>([]);\r\n  const [spinnerStatus, setSpinnerStatus] = useState<boolean>(false);\r\n\r\n  const buttonCreateVacancyList = useCallback(() => {\r\n    return favoriteVacancyListCreate(favoriteVacancyes, pagesCount);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [favoriteVacancyes]);\r\n\r\n  useEffect(() => {\r\n    setSpinnerStatus(true);\r\n    const res = !!favoriteVacancyes.length\r\n      ? buttonCreateVacancyList()[currentPageForFavoritePage - 1]\r\n      : favoriteVacancyes;\r\n    seCurentPageVacancyData(res);\r\n    setSpinnerStatus(false);\r\n  }, [\r\n    buttonCreateVacancyList,\r\n    currentPageForFavoritePage,\r\n    favoriteVacancyes,\r\n    numIndexFavoritePage,\r\n  ]);\r\n\r\n  return (\r\n    <section className=\"page favorite-vacancy-page\">\r\n      <div className=\"favorite-vacancy-page-container\">\r\n        {spinnerStatus && <Loader />}\r\n        {!spinnerStatus && (\r\n          <VacancyList vacancyData={curentPageVacancyData} spinnerStatus={spinnerStatus} />\r\n        )}\r\n        {!!favoriteVacancyes.length ? (\r\n          <Paginator\r\n            numIndex={numIndexFavoritePage}\r\n            pagesAmmount={favoritePageButtonsAmount}\r\n            totalVacancies={favoriteVacancyes.length}\r\n          />\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default FavoriteVacancyPage;\r\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["memo","props","dispatch","useAppDispatch","location","useLocation","numIndex","buttonCreate","currentPage","useAppSelector","state","paginationStateSlice","currentPageForFavoritePage","_useState","useState","_useState2","_slicedToArray","hilightButton","setHiligthButton","_useSearchParams","useSearchParams","_useSearchParams2","setSearchParams","fetchQuery","dataSlice","useEffect","pathname","includes","_jsx","_Fragment","children","length","map","item","className","id","String","disabled","onClick","e","fetchQueryData","_objectSpread","page","Number","currentTarget","setCurrentPageForFavoritePage","setCurrentPage","setFetchQuery","fetchGetVacancy","queryString2","trim","createPaginationQueryForFetch","nanoid","width","height","viewBox","fill","xmlns","d","contexClass","firstAndLastPaginationPages","concat","setNumIndexFavoritePage","setNumIndex","lastPaginationPage","firstPaginationPage","arrowButtonHandler","PaginationArrowSVG","pagesAmmount","totalVacancies","pageCounter","pageCount","disabledLeftArrow","setDisabledLeftArrow","_useState3","_useState4","disabledRightArrow","setDisabledRightArrow","useCallback","createAllButtonsNumberNote","Math","min","apply","_toConsumableArray","max","setFirstAndLastPaginationPages","_jsxs","PaginationArrowButton","PageButtonList","stroke","strokeWidth","strokeLinecap","strokeLinejoin","favoriteVacancyList","some","vacancy","stopPropagation","setFavoriteVacancy","addFavoriteVacancyButtonHandler","StarSVG","data","navigate","useNavigate","setCurrentVacancieId","vacancieItemHandler","profession","payment_from","payment_to","currency","type_of_work","title","LocationPointSVG","town","AddFavoriteVacancyButton","vacancyData","spinnerStatus","Loader","VacancyItem","NoFavoriteVacancyMessage","numIndexFavoritePage","pagesCount","favoriteVacancyes","favoritePageButtonsAmount","curentPageVacancyData","seCurentPageVacancyData","setSpinnerStatus","buttonCreateVacancyList","favoriteVacancyListCreate","res","VacancyList","Paginator","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}